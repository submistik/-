# bot.py
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import executor
import random
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
CHANNEL_ID = "@your_channel"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
CHANNEL_URL = "https://t.me/your_channel"

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ë–∞–∑–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤: "–ù–∞–∑–≤–∞–Ω–∏–µ" -> "–ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"
logos = {}
for file in os.listdir("logos"):
    if file.endswith((".png", ".jpg", ".jpeg")):
        name = os.path.splitext(file)[0].capitalize()
        logos[name] = f"logos/{file}"

user_data = {}  # user_id: {score, current_answer}

# === –ö–û–ú–ê–ù–î–´ ===
@dp.message_handler(commands=['start'])
async def start(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"score": 0, "current_answer": None}

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play"))
    kb.add(InlineKeyboardButton("üìä –°—á—ë—Ç", callback_data="score"))
    kb.add(InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_URL))

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É *¬´–£–≥–∞–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø¬ª*!\n\n"
        "üéØ –£–≥–∞–¥—ã–≤–∞–π –ª–æ–≥–æ—Ç–∏–ø—ã –∏ –ø–æ–ª—É—á–∞–π –æ—á–∫–∏!\n"
        "üéÅ –¢–æ–ø-–∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—Ç —à–∞–Ω—Å –Ω–∞ VIP-—Ä–µ–∫–ª–∞–º—É –≤ –∫–∞–Ω–∞–ª–µ!",
        reply_markup=kb,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "play")
async def play(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    logo_name = random.choice(list(logos.keys()))
    user_data[user_id]["current_answer"] = logo_name

    with open(logos[logo_name], 'rb') as photo:
        await bot.send_photo(
            chat_id=callback_query.message.chat.id,
            photo=photo,
            caption="üîç –£–≥–∞–¥–∞–π—Ç–µ –ª–æ–≥–æ—Ç–∏–ø! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "score")
async def show_score(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    score = user_data.get(user_id, {}).get("score", 0)
    await callback_query.message.answer(f"üìä –í–∞—à —Å—á—ë—Ç: {score} –æ—á–∫–æ–≤")
    await callback_query.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
@dp.message_handler()
async def check_answer(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return

    current_answer = user_data[user_id]["current_answer"]
    if not current_answer:
        return

    if message.text.strip().lower() == current_answer.lower():
        user_data[user_id]["score"] += 1
        user_data[user_id]["current_answer"] = None

        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –æ—á–∫–æ! üéâ")
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üéÆ –°–ª–µ–¥—É—é—â–∏–π", callback_data="play"))
        kb.add(InlineKeyboardButton("üèÜ –¢–æ–ø", callback_data="score"))
        
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=kb)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
